<!-- PrismJS for Syntax Highlighting -->
<link href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet"/>
<script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>


<style>
    .wp_blog_theme {
        --primary: #e58c32;
        --secondary: #f8c291;
        --light-bg: #fef9f4;
        --text-dark: #2d2d2d;
        --tab-radius: 12px;
        --shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        --code-bg: #001f3f;
        --code-text: #d4f1ff;
    }

    .wp_blog_container {
        font-family: "Segoe UI", sans-serif;
        background: var(--light-bg);
        margin: 0;
        padding: 0;
        color: var(--text-dark);
    }

    .wp_blog_main-heading {
        text-align: center;
        font-size: 2.4rem;
        color: var(--primary);
        margin-top: 2.5rem;
        font-weight: bold;
    }

    .wp_blog_explanation {
        max-width: 940px;
        margin: 2rem auto;
        padding: 2rem;
        background: white;
        border-radius: var(--tab-radius);
        box-shadow: var(--shadow);
    }

    .wp_blog_explanation h2 {
        font-size: 1.4rem;
        color: var(--primary);
        margin-bottom: 0.5rem;
    }

    .wp_blog_explanation p,
    .wp_blog_explanation li {
        font-size: 1.05rem;
        line-height: 1.7;
        margin: 0.5rem 0;
    }

    .wp_blog_explanation p code,
    .wp_blog_explanation li code {
        background: #fef9f4;
        padding: 3px 6px;
        border-radius: 4px;
        font-family: 'Courier New', monospace;
        color: #2d2d2d;
        display: inline-block;
    }
    
    .wp_blog_explanation pre {
        background: var(--code-bg);
        padding: 1rem;
        border-radius: 8px;
        overflow-x: auto;
        margin-bottom: 1rem;
    }

    .wp_blog_explanation pre code {
        display: block;
        background: transparent;
        padding: 0;
        color: var(--code-text);
    }

    .wp_blog_explanation img {
        max-width: 100%;
        border-radius: var(--tab-radius);
        margin-top: 1rem;
        box-shadow: 0 2px 12px rgba(0,0,0,0.06);
    }
</style>



<div class="wp_blog_container wp_blog_theme">

<h1 class="wp_blog_main-heading"></h1>

<div class="wp_blog_explanation">
  <h2>What is Time Complexity?</h2>
  <p>Time complexity measures how efficient an algorithm is as the input size increases. It's not the same as the actual time taken to run a program.</p>
  <p><code>Time Complexity != Execution Time</code></p>

  <h2>Linear vs Binary Search</h2>

  <div style="display: flex; gap: 2rem; flex-wrap: wrap; margin-top: 1.5rem;">
    <div style="flex: 1 1 420px; background: #fff8ec; padding: 1rem 1.5rem; border-radius: 12px; box-shadow: 0 2px 10px rgba(0,0,0,0.06);">
      <h3 style="color: #d35400; margin-bottom: 0.75rem;">Linear Search</h3>
      <ul>
        <li><strong>Best Case:</strong> Element at 1st index → 1 operation</li>
        <li><strong>Average Case:</strong> Element at n/2 index → n/2 operations</li>
        <li><strong>Worst Case:</strong> Element not found → n operations</li>
        <li><strong>Time Complexity:</strong> O(n)</li>
        <li><strong>Requirement:</strong> Can work on unsorted arrays</li>
      </ul>
      <img src="https://namastedev.com/blog/wp-content/uploads/2025/06/Screenshot-2025-06-17-at-3.50.59%E2%80%AFPM.png" alt="Linear Search Graph">
    </div>
    <div style="flex: 1 1 420px; background: #ecfaff; padding: 1rem 1.5rem; border-radius: 12px; box-shadow: 0 2px 10px rgba(0,0,0,0.06);">
      <h3 style="color: #2980b9; margin-bottom: 0.75rem;">Binary Search</h3>
      <ul>
        <li><strong>Best Case:</strong> Middle element matched → 1 operation</li>
        <li><strong>Average Case:</strong> log₂(n) operations</li>
        <li><strong>Worst Case:</strong> log₂(n) operations</li>
        <li><strong>Time Complexity:</strong> O(log n)</li>
        <li><strong>Requirement:</strong> Only works on sorted arrays</li>
      </ul>
      <img src="https://namastedev.com/blog/wp-content/uploads/2025/06/Screenshot-2025-06-17-at-3.51.05%E2%80%AFPM.png" alt="Binary Search Graph">
    </div>
  </div>

  <p>
    When we use <code>Linear Search</code> for an input size of 100, it runs 100 times, whereas <code>Binary Search</code> takes only 7 steps. This shows that Binary Search is more efficient.
    As the input size (n) increases, the way an algorithm behaves helps us understand how efficient it is.
    Also, the graph helps us understand that Binary Search is more efficient.
  </p>

  <h2>Big O Notation</h2>
  <p>It is nothing; just a symbol used to represent the worst-case complexity.</p>

  <h2>Code Examples of Time Complexity</h2>

  <p><code>O(1)</code></p>
  <pre><code class="language-cpp">
// Accessing 5th index element
int value = arr[5];
</code></pre>
  <p>The time complexity is O(1) because we directly access the 5th index without any iteration.</p>

  <p><code>O(n)</code></p>
  <pre><code class="language-cpp">
for(int i = 0; i < n; i++) {
    // do something
}
</code></pre>

  <p><code>O(log n)</code></p>
  <pre><code class="language-cpp">
// e.g., Binary Search
int binarySearch(int arr[], int n, int key) {
    int low = 0, high = n - 1;
    while(low <= high) {
        int mid = (low + high) / 2;
        if(arr[mid] == key) return mid;
        else if(arr[mid] < key) low = mid + 1;
        else high = mid - 1;
    }
    return -1;
}
</code></pre>

  <p><code>O(n^2)</code> – Nested Loop</p>
  <pre><code class="language-cpp">
for(int i = 0; i < n; i++) {
    for(int j = 0; j < n; j++) {
        // do something
    }
}
</code></pre>

  <p><code>O(n log n)</code></p>
  <pre><code class="language-cpp">
for(int i = 0; i < n; i++) {
    int temp = n;
    while(temp > 1) {
        temp = temp / 2;
        // do something
    }
}
</code></pre>

  <p><code>O(n^3)</code> – Triple Nested Loops</p>
  <pre><code class="language-cpp">
for(int i = 0; i < n; i++) {
    for(int j = 0; j < n; j++) {
        for(int k = 0; k < n; k++) {
            // do something
        }
    }
}
</code></pre>

  <p><code>O(2^n)</code></p>
  <pre><code class="language-cpp">
// Recursive Fibonacci
int fib(int n) {
    if(n <= 1) return n;
    return fib(n-1) + fib(n-2);
}
</code></pre>

  <p><code>O(n!)</code></p>
  <pre><code class="language-cpp">
// Permutation generator
void permute(string s, int l, int r) {
    if(l == r) {
        cout << s << endl;
    } else {
        for(int i = l; i <= r; i++) {
            swap(s[l], s[i]);
            permute(s, l + 1, r);
            swap(s[l], s[i]); // backtrack
        }
    }
}
</code></pre>

  <h2>Time Complexity Priorities</h2>
  <ul>
    <li><code>O(1)</code> – Constant time</li>
    <li><code>O(log n)</code> – e.g., Binary Search</li>
    <li><code>O(n)</code> – e.g., Linear Search</li>
    <li><code>O(n log n)</code> – e.g., Merge Sort</li>
    <li><code>O(n^2)</code> – e.g., Nested Loops</li>
    <li><code>O(n^3)</code> – e.g., Triple Nested Loops</li>
    <li><code>O(2^n)</code> – Recursion (e.g., Fibonacci)</li>
    <li><code>O(n!)</code> – e.g., Brute-force permutations</li>
  </ul>

  <img src="https://namastedev.com/blog/wp-content/uploads/2025/06/Screenshot-2025-06-17-at-5.04.49 PM.png" alt="Time Complexity Full Comparison Graph">

  <h2>What is Space Complexity?</h2>
  <p>Space complexity refers to how much extra memory an algorithm uses.</p>

  <h3>Examples:</h3>
  <ul>
    <li>Access 5th element: <code>O(1)</code></li>
    <li>Find max with variable: <code>O(1)</code></li>
    <li>New array: <code>O(n)</code></li>
    <li>2D Matrix: <code>O(n^2)</code></li>
  </ul>
</div>
</div>
   <script>
    document.addEventListener("DOMContentLoaded", () => {
        const buttons = document.querySelectorAll(".wp_blog_code-tab-button");
        const contents = document.querySelectorAll(".wp_blog_code-tab-content");

        buttons.forEach((button) => {
            button.addEventListener("click", () => {
                const lang = button.getAttribute("data-lang");
                buttons.forEach((btn) => btn.classList.remove("active"));
                contents.forEach((content) =>
                    content.classList.remove("active")
                );
                button.classList.add("active");
                document
                    .querySelector(
                        `.wp_blog_code-tab-content[data-lang="${lang}"]`
                    )
                    .classList.add("active");
            });
        });
    });
</script> 